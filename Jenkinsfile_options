pipeline {
    agent {
        node {
            label 'my-agent-label'
            customWorkspace '/my/custom/workspace'
        }
    }
    
    options {
        // Number of builds to keep in Jenkins
        buildDiscarder(logRotator(numToKeepStr: '10'))
        
        // Timeout for the build
        timeout(time: 1, unit: 'HOURS')
        
        // Set the pipeline to run only if previous build was successful
        skipDefaultCheckout(true)
    }
    
    triggers {
        // Schedule the job to run every day at midnight
        cron('H 0 * * *')
        
        // Poll SCM every 15 minutes
        pollSCM('* * * * *')
    }
    
    environment {
        // Define environment variables
        MY_ENV_VAR = 'my-value'
        ANOTHER_ENV_VAR = 'another-value'
    }
    
    parameters {
        // Define parameters for the pipeline
        string(name: 'PARAM1', defaultValue: 'default-value', description: 'A parameter for the pipeline')
        booleanParam(name: 'ENABLE_FEATURE', defaultValue: false, description: 'Enable a specific feature')
    }
    
    stages {
        stage('Setup') {
            when {
                // Run this stage only if the parameter ENABLE_FEATURE is true
                expression { params.ENABLE_FEATURE }
            }
            steps {
                echo 'Setting up...'
                script {
                    // Custom function call
                    setupEnvironment()
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building the project...'
                script {
                    // Build commands
                    sh 'echo Building the project...'
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'Running tests...'
                script {
                    // Test commands
                    sh 'echo Running tests...'
                }
            }
        }
        
        stage('Deploy') {
            when {
                // Run this stage only if the build is successful
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Deploying the project...'
                script {
                    // Deploy commands
                    sh 'echo Deploying the project...'
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
            script {
                // Additional actions on success
                notify('success')
            }
        }
        failure {
            echo 'Pipeline failed.'
            script {
                // Additional actions on failure
                notify('failure')
            }
        }
    }
}

// Custom function to set up environment
def setupEnvironment() {
    sh 'echo Setting up environment variables...'
    // You can add more setup commands here
}

// Custom function to send notifications
def notify(status) {
    if (status == 'success') {
        echo 'Sending success notification...'
        // Add code to send success notification
    } else if (status == 'failure') {
        echo 'Sending failure notification...'
        // Add code to send failure notification
    }
}
